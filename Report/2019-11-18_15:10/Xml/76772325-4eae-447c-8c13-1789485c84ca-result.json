{"name": "test_modify_title[Ayla_45-Ayla_45]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <Case.test_home.TestHome object at 0x10c12b5c0>, name = 'Ayla_45'\nexpect_name = 'Ayla_45'\n\n    @pytest.mark.parametrize(\"name,expect_name\", [(\"Ayla45\", \"Ayla45\"),\n                                                  (\"Ayla 45\", \"Ayla 45\"),\n                                                  (\"Ayla_45\", \"Ayla_45\"),\n                                                  (\"Ayla45Ayla45Ayla45123\", \"Ayla45Ayla45Ayla4512\"),\n                                                   (\"艾拉-45\", \"艾拉-45\")])\n    def test_modify_title(self, name, expect_name):\n        # self.name = self.home.modify_title(name)\n        self.home.modify_title(name)\n>       actual_name = self.home.get_home_name()\n\nCase/test_home.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPage/home_page.py:30: in get_home_name\n    text = self.find_element_until_visibility(self._home_name).text\nCommon/base_page.py:28: in find_element_until_visibility\n    ele = WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e888e25b-aef1-45c0-937a-960cb959411c\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x10c12b240>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv/lib/python3.7/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException"}, "parameters": [{"name": "name", "value": "'Ayla_45'"}, {"name": "expect_name", "value": "'Ayla_45'"}], "start": 1574061060049, "stop": 1574061094176, "uuid": "b48a0776-e8f8-4adc-8f80-64e470767c74", "historyId": "ecc5f710a22d14ab7c9c5cd9f708ec37", "testCaseId": "997ae8332b99cac9361d6e4d50e39dd6", "fullName": "Case.test_home.TestHome#test_modify_title", "labels": [{"name": "parentSuite", "value": "Case"}, {"name": "suite", "value": "test_home"}, {"name": "subSuite", "value": "TestHome"}, {"name": "host", "value": "ZTL.local"}, {"name": "thread", "value": "4015-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Case.test_home"}]}